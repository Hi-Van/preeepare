{"version":3,"sources":["charts/radarmap.js","charts/horizontal.js","App.js","serviceWorker.js","index.js"],"names":["data","labels","datasets","label","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","RadarMap","className","options","maintainAspectRatio","responsive","borderWidth","Horizontal","App","href","target","rel","role","aria-label","to","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0LAGMA,EAAO,CACTC,OAAQ,CAAC,mBAAoB,sBAAuB,iBAAkB,kBAAmB,uBAAwB,eAAgB,uBACjIC,SAAU,CACN,CACIC,MAAO,YACPC,gBAAiB,uBACjBC,YAAa,qBACbC,qBAAsB,qBACtBC,iBAAkB,OAClBC,0BAA2B,OAC3BC,sBAAuB,qBACvBT,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,QAgB5BU,MAXf,WACI,OACI,yBAAKC,UAAU,iBACX,kBAAC,QAAD,CACIX,KAAMA,EACNY,QAAS,CAAEC,qBAAqB,EAAMC,YAAY,OCpB5Dd,EAAO,CACTC,OAAQ,CAAC,eACTC,SAAU,CACN,CACIC,MAAO,iBACPC,gBAAiB,yBACjBC,YAAa,uBACbU,YAAa,EACbf,KAAM,CAAC,MAEX,CACIG,MAAO,UACPC,gBAAiB,yBACjBC,YAAa,uBACbU,YAAa,EACbf,KAAM,CAAC,KAEX,CACIG,MAAO,YACPC,gBAAiB,uBACjBC,YAAa,qBACbU,YAAa,EACbf,KAAM,CAAC,OAgBJgB,MAXf,WACI,OACI,yBAAKL,UAAU,sBACX,kBAAC,gBAAD,CACIX,KAAMA,EACNY,QAAS,CAAEC,qBAAqB,EAAMC,YAAY,O,sBCFnDG,MA5Bf,WACE,OACE,yBAAKN,UAAU,OACb,uBAAGO,KAAK,sCAAsCC,OAAO,SAASC,IAAI,uBAChE,4BAAQT,UAAU,WAChB,0BAAMA,UAAU,aAAaU,KAAK,MAAMC,aAAW,SAAnD,kBAIJ,yCACA,0DAEA,wBAAIX,UAAU,aAAd,uBAEA,yBAAKA,UAAU,cACb,kBAAC,IAAD,CAAMY,GAAG,WAAU,4BAAQZ,UAAU,aAAY,0BAAMU,KAAK,MAAMC,aAAW,SAA5B,gBAA9B,YACnB,kBAAC,IAAD,CAAMC,GAAG,aAAY,4BAAQZ,UAAU,aAAY,0BAAMU,KAAK,MAAMC,aAAW,UAA5B,gBAA9B,cACrB,kBAAC,IAAD,CAAMC,GAAG,UAAS,4BAAQZ,UAAU,aAAY,0BAAMU,KAAK,MAAMC,aAAW,UAA5B,8CAA9B,YAGpB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,KAAK,UAAUC,UAAWf,IACjC,kBAAC,IAAD,CAAOc,KAAK,YAAYC,UAAWT,OChBvBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c180819f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Radar } from 'react-chartjs-2';\r\n\r\nconst data = {\r\n    labels: ['Arrays & Strings', 'Searching & Sorting', 'Graphs & Trees', 'Stacks & Queues', 'Traversal Algorithms', 'Linked Lists', 'Dynamic Programming'],\r\n    datasets: [\r\n        {\r\n            label: 'My Topics',\r\n            backgroundColor: 'rgba(255,99,132,0.2)',\r\n            borderColor: 'rgba(255,99,132,1)',\r\n            pointBackgroundColor: 'rgba(255,99,132,1)',\r\n            pointBorderColor: '#fff',\r\n            pointHoverBackgroundColor: '#fff',\r\n            pointHoverBorderColor: 'rgba(255,99,132,1)',\r\n            data: [28, 48, 40, 19, 96, 27, 100]\r\n        }\r\n    ]\r\n};\r\n\r\nfunction RadarMap() {\r\n    return (\r\n        <div className=\"radar-wrapper\">\r\n            <Radar\r\n                data={data}\r\n                options={{ maintainAspectRatio: true, responsive: true }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RadarMap;","\r\nimport React from 'react';\r\nimport { HorizontalBar } from 'react-chartjs-2';\r\n\r\nconst data = {\r\n    labels: ['My Attempts'],\r\n    datasets: [\r\n        {\r\n            label: 'Total Attempts',\r\n            backgroundColor: 'rgba(92, 129, 204,0.2)',\r\n            borderColor: 'rgba(92, 129, 204,1)',\r\n            borderWidth: 1,\r\n            data: [100]\r\n        },\r\n        {\r\n            label: 'Correct',\r\n            backgroundColor: 'rgba(140, 204, 92,0.2)',\r\n            borderColor: 'rgba(140, 204, 92,1)',\r\n            borderWidth: 1,\r\n            data: [68]\r\n        },\r\n        {\r\n            label: 'Incorrect',\r\n            backgroundColor: 'rgba(255,99,132,0.2)',\r\n            borderColor: 'rgba(255,99,132,1)',\r\n            borderWidth: 1,\r\n            data: [32]\r\n        }\r\n    ]\r\n};\r\n\r\nfunction Horizontal() {\r\n    return (\r\n        <div className=\"horizontal-wrapper\">\r\n            <HorizontalBar\r\n                data={data}\r\n                options={{ maintainAspectRatio: true, responsive: true }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Horizontal;\r\n","import React from 'react';\nimport RadarMap from './charts/radarmap';\nimport Horizontal from './charts/horizontal'\nimport { Route, Link, Switch } from 'react-router-dom';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <a href='https://github.com/Hi-Van/preeepare' target='_blank' rel='noopener noreferrer'>\n        <button className=\"to-code\">\n          <span className=\"emoji-logo\" role=\"img\" aria-label='paper'>üìÉ</span>\n        </button>\n      </a>\n\n      <h1>Preeepare</h1>\n      <h2>Visualize your progression</h2>\n\n      <h1 className='chart-opt'>I want to see my...</h1>\n\n      <div className='btn-layout'>\n        <Link to='/topics'><button className='btn-chart'><span role=\"img\" aria-label='books'>üìö</span> TOPICS</button></Link>\n        <Link to='/accuracy'><button className='btn-chart'><span role=\"img\" aria-label='target'>üéØ</span> ACCURACY</button></Link>\n        <Link to='/speed'><button className='btn-chart'><span role=\"img\" aria-label='runner'>üèÉ‚Äç‚ôÇÔ∏èüí®</span> SPEED</button></Link>\n      </div>\n\n      <Switch>\n        <Route path='/topics' component={RadarMap} />\n        <Route path='/accuracy' component={Horizontal} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}